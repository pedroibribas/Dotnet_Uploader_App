@using Uploader.Data.Models.Entities
@using Uploader.Data.Services
@using Data.Models.Dtos

@inject UploaderService UploaderService

<EditForm OnValidSubmit="SubmitForm" Model="newCustomer">
    <div>
        <label for="firstName">Nome: </label>
        <InputText id="firstName" class="form-control" @bind-Value="newCustomer.FirstName" />
    </div>
    <div>
        <label for="lastName">Sobrenome: </label>
        <InputText id="lastName" class="form-control" @bind-Value="newCustomer.LastName" />
    </div>
    <div>
        <label for="profilePicture">Foto do perfil: </label>
        <InputFile
            class="form-control"
            OnChange="@LoadFile"
            accept=@allowedExtensions />
    </div>
    <button type="submit" class="btn btn-primary mt-3">
        Criar cliente
    </button>
</EditForm>

@code {
    private Customer newCustomer = new();
    private IBrowserFile? UserPicture;
    private int maxAllowedFilesAmount = 1;
    private long maxAllowedFileSize = (1024 * 1024) / 2;
    private string allowedExtensions = ".png,.jpg,.jpeg";
    public List<string> inputErrors { get; set; } = new();

    private void LoadFile(InputFileChangeEventArgs eventArgs)
    {
        if (IsUserPictureInputValid(eventArgs))
        {
            UserPicture = eventArgs.File;
        }
    }

    private bool IsUserPictureInputValid(InputFileChangeEventArgs eventArgs)
    {
        inputErrors.Clear();

        if (!EnsureMaxAllowedFilesAmount(eventArgs))
        {
            inputErrors.Add($"Apenas {maxAllowedFilesAmount} arquivo é permitido para envio.");
            return false;
        }

        if (!EnsureMaxFileSize(eventArgs))
        {
            inputErrors.Add(
                $"{eventArgs.File.Name} tem {eventArgs.File.Size}, mas o máximo permitido é de {maxAllowedFileSize}.");
            return false;
        }

        return true;
    }

    private async Task SubmitForm()
    {
        if (IsFormValid())
        {
            CreateUserNewFileDto dto = new()
            {
                File = UserPicture,
                UserId = "1a2s3d4f5g6h7j8k9l"
            };

            var res = await UploaderService.CreateFile(dto);
            
            GetResponseError(res);
        }
    }

    private bool IsFormValid()
    {
        inputErrors.Clear();

        if (!EnsureUserPicture())
        {
            inputErrors.Add($"Submit: Nenhuma foto do cliente para enviar.");
        }

        if (inputErrors.Count > 0)
            return false;

        return true;
    }

    private void GetResponseError(CreateUserNewFileDto res)
    {
        if (res != null && res.Response != null && res.Response.Status == ResponseStatus.ERROR)
        {
            inputErrors.Add($"{res.Response.Message}");
        }
    }

    private bool EnsureMaxAllowedFilesAmount(InputFileChangeEventArgs eventArgs) => 
        eventArgs.FileCount <= maxAllowedFilesAmount;

    private bool EnsureMaxFileSize(InputFileChangeEventArgs eventArgs) =>
        eventArgs.File.Size <= maxAllowedFileSize;
    
    private bool EnsureUserPicture() =>
        UserPicture != null;
}


@*
 * - O nº de arquivos permitidos para envio e a quantia de mb's são limitados para evitar o envio
 *   arquivos infinitos ou de quantias de bytes infinitas pelo cliente.
 *
 * - O cálculo do peso do envio é medido em bytes, e fica mais legível quando descrito em
 *   <1kb> * 1024 * <mbs>
*@


